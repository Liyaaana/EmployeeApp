@page
@model EmployeeApp.Pages.Dashboard.IndexModel
@{
    ViewData["Title"] = "Dashboard";
}

<h2 class="mb-4 text-center">Employee Dashboard</h2>

<div class="row justify-content-center mb-4">
    <div class="col-md-4 col-lg-3 mb-3">
        <div class="card text-white bg-success shadow-sm h-100">
            <div class="card-body d-flex align-items-center">
                <i class="bi bi-people-fill fs-1 me-3"></i>
                <div>
                    <h6 class="card-title mb-1">Total Employees</h6>
                    <p class="card-text fs-5 fw-bold mb-0">@Model.TotalEmployees</p>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4 col-lg-3 mb-3">
        <div class="card text-white bg-warning shadow-sm h-100">
            <div class="card-body d-flex align-items-center">
                <i class="bi bi-building fs-1 me-3"></i>
                <div>
                    <h6 class="card-title mb-1">Total Departments</h6>
                    <p class="card-text fs-5 fw-bold mb-0">@Model.TotalDepartments</p>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Toggle Section -->
<div class="container">
    <div class="row mb-4 text-center">
        <div class="col">
            <button id="toggleEmployeesBtn" class="btn btn-primary text-white px-4 py-2 fw-bold rounded shadow-sm">Hide All Employees</button>
        </div>
    </div>
</div>


<!-- Table -->
<div class="container" id="employeeTable">
    <div class="row g-2 mb-4" id="dynamicFilterForm">
        @if (Model.IsAdmin)
        {
            <div class="col-md-4">
                <input type="text" id="filterName" class="form-control" placeholder="Search by Name" />
            </div>
            <div class="col-md-3">
                <input type="text" id="filterDepartment" class="form-control" placeholder="Department" />
            </div>
            <div class="col-md-2">
                <input type="number" step="0.01" id="filterMinSalary" class="form-control" placeholder="Min Salary" />
            </div>
            <div class="col-md-2">
                <input type="number" step="0.01" id="filterMaxSalary" class="form-control" placeholder="Max Salary" />
            </div>
            <div class="col-md-1 d-flex align-items-center">
                <button id="clearFilterBtn" class="btn btn-outline-primary btn-sm w-100 hover:bg-primary">Clear</button>
            </div>
        }
        else
        {
            <div class="col-md-8">
                <input type="text" id="filterName" class="form-control" placeholder="Search by Name" />
            </div>
            <div class="col-md-3">
                <input type="text" id="filterDepartment" class="form-control" placeholder="Department" />
            </div>
            <div class="col-md-1 d-flex align-items-center">
                <button id="clearFilterBtn" class="btn btn-outline-primary btn-sm w-100 hover:bg-primary">Clear</button>
            </div>
        }
    </div>


    <table class="table table-bordered table-striped">
        <thead class="thead-dark">
            <tr>
                <th>Name</th>
                <th>Email</th>
                <th>PhoneNumber</th>
                <th>Department</th>
                @if (Model.IsAdmin)
                {
                    <th id="salaryHeader">Salary</th>
                }
            </tr>
        </thead>
        <tbody id="employeeTableBody">
            @foreach (var employee in Model.Employees)
            {
                <tr>
                    <td>@employee.Name</td>
                    <td>@employee.Email</td>
                    <td>@employee.PhoneNumber</td>
                    <td>@employee.Department</td>
                    @if (Model.IsAdmin)
                    {
                        <td>@((int)Math.Floor(employee.Salary))</td>
                    }
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Pagination -->
<div class="container" id="pagination" style="display: @(Model.TotalPages > 1 ? "block" : "none");">
    <nav aria-label="Page navigation">
        <ul class="pagination">
            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                    <a class="page-link" href="?page=@i">@i</a>
                </li>
            }
        </ul>
    </nav>
</div>

@section Scripts {
    <script>
        let isVisible = true;

        $(document).ready(function () {
            // Toggle Table
            $("#toggleEmployeesBtn").click(function () {
            isVisible = !isVisible;
            $("#employeeTable, #pagination, #dynamicFilterForm").toggle(isVisible);
            $(this).text(isVisible ? "Hide All Employees" : "Show All Employees");
        });

            // Clear Button
            $("#clearFilterBtn").click(function () {
                $("#filterName, #filterDepartment, #filterMinSalary, #filterMaxSalary").val(''); // empty string to clear all filter inputs
                loadFilteredEmployees({}); // empty object {} ie, no filters are applied and that reloads all employee data (through an AJAX request).
            });

            // Real-time filtering
                    let salaryAlertShown = false;

            $("#filterName, #filterDepartment, #filterMinSalary, #filterMaxSalary").on("input", function () {
                const filters = collectFilters();

                // Check if minSalary and maxSalary are valid numbers
                const min = parseFloat(filters.minSalary); // converts string values like "50000" to float
                const max = parseFloat(filters.maxSalary);

                if (!isNaN(min) && !isNaN(max)) { // NaN : Not a Number, Here if min and max are valid nos
                    if (max < min) {
                        if (!salaryAlertShown) {
                            alert("Max salary cannot be less than Min salary.");
                            salaryAlertShown = true; // to prevent the alert from showing repeatedly
                        }
                        return; // Exits the function early since the input is invalid.
                    } else {
                        salaryAlertShown = false;
                    }
                }

                loadFilteredEmployees(filters); // If inputs are valid, it calls a function that loads filtered employee data
            });
        });

        function collectFilters() {
            return {
                name: $("#filterName").val(),
                department: $("#filterDepartment").val(),
                minSalary: $("#filterMinSalary").val(),
                maxSalary: $("#filterMaxSalary").val()
            };
        }

        function loadFilteredEmployees(filters) {
            $.ajax({
                url: '?handler=FilterEmployees', // Sends a GET request to the Razor Page’s handler method OnGetFilterEmployees()
                method: 'GET',
                data: filters,
                success: function (response) {
                    const employees = response.employees;
                    const isAdmin = response.isAdmin;

                    $("#employeeTableBody").empty();
                    $("#salaryHeader").toggle(isAdmin);

                    if (employees.length === 0) {
                        // Creates a table row (<tr>) with one table cell (<td>) with column span 4 or 5
                        $("#employeeTableBody").append(`<tr><td colspan="${isAdmin ? 5 : 4}" class="text-center">No employees found.</td></tr>`);
                        $("#pagination").hide();
                        return; // Exits the function early.
                    }

                    // Stores the results and pagination data in global variables so they can be accessed by another function (renderPaginatedEmployees).
                    window.filteredEmployees = employees;
                    window.currentPage = 1;
                    window.pageSize = 5;
                    window.isAdminView = isAdmin;

                    renderPaginatedEmployees();

                    // Ensure employee section is visible
                    if (!isVisible) {
                        $("#employeeTable").show();
                        $("#toggleEmployeesBtn").text("Hide All Employees"); // Changes button text to "Hide All Employees".
                        isVisible = true;
                    }
                }
            });
        }

        function renderPaginatedEmployees() {
            const startIndex = (window.currentPage - 1) * window.pageSize; // ie, if currentPage = 2 and pageSize = 5, startIndex = 5
            const endIndex = startIndex + window.pageSize;
            const pageEmployees = window.filteredEmployees.slice(startIndex, endIndex);

            $("#employeeTableBody").empty();
            pageEmployees.forEach(emp => {
                const row = `
                    <tr>
                        <td>${emp.name}</td>
                        <td>${emp.email}</td>
                        <td>${emp.phoneNumber}</td>
                        <td>${emp.department}</td>
                        ${window.isAdminView ? `<td>${Math.floor(emp.salary)}</td>` : ""}
                    </tr>`;
                $("#employeeTableBody").append(row);
            });
            // Math.floor() removes decimal places.
            renderPaginationControls(); // Calls the function to render the pagination buttons.
        }

        function renderPaginationControls() {
            const totalPages = Math.ceil(window.filteredEmployees.length / window.pageSize);
            const pagination = $("#pagination ul"); // <ul> inside the #pagination container.
            pagination.empty(); // Clears out old pagination links.


            for (let i = 1; i <= totalPages; i++) {
                const activeClass = (i === window.currentPage) ? "active" : ""; // To highlight the current page
                // page-item is a Bootstrap class to style item in pagination in which activeClass literal is added for highlighting if current page
                const pageItem = `<li class="page-item ${activeClass}">
                    <a class="page-link" href="#">${i}</a>
                </li>`;
                // class="page-link" is a Bootstrap class that styles the link to look like a pagination button in which i comes. href="#" means the link doesn't go to another page, it just triggers JavaScript.
                pagination.append(pageItem);
            }

            $("#pagination").show();

            // Adds a click event to each pagination link.
            $(".page-item a").click(function (e) {
                e.preventDefault();
                const selectedPage = parseInt($(this).text()); // Gets the page number that was clicked
                if (!isNaN(selectedPage)) {
                    window.currentPage = selectedPage;
                    renderPaginatedEmployees();
                }
            });
        }

    </script>
}